name: "Build Modpack"
description: "Build and upload modpack artifacts using packwiz"

inputs:
  artifact-name:
    description: "The name of the artifact to upload"
    default: modpack

  modpack:
    description: "Path to the modpack directory"
    required: false
    default: "."

  build-modrinth:
    description: "Set to 'true' to build the Modrinth .mrpack file"
    required: true

  build-curse:
    description: "Set to 'true' to build the CurseForge .zip file"
    required: true

runs:
  using: "composite"

  steps:
    - name: Check Out Git Repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        set -e
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get update
        sudo apt-get install -y jq moreutils
      shell: bash

    - name: Get modpack version
      id: version
      run: |
        version=$(yq '.version' -oj ${{ inputs.modpack }}/pack.toml | jq -r)
        echo "version=$version" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Check modpack version matches tag
      run: |
        tag=$(git describe --exact-match --tags --abbrev=0)
        version='${{ steps.version.outputs.version }}'

        echo "Version: $version"

        if [ -z "$tag" ]; then
          echo "::warning ::No tag found. Skipping version check."
          exit 0
        else
          echo "Tag: $tag"

          # Parse version from tag, e.g. `cuties-v1.0.0` -> `1.0.0`
          set -e
          tag_version=$(echo "$tag" | cut -d'-' -f2)
          tag_version="${tag_version#v}"
          echo "Tag Version: $tag_version"
        fi

        if [ "${{ steps.version.outputs.version }}" != "$tag_version" ]; then
          echo "::error ::Version in ${{ inputs.modpack }}/pack.toml ($version) does not match tag $(tag)"
          exit 1
        fi
      shell: bash

    - name: Process template files
      shell: bash
      run: |
        set -e
        export VERSION='${{ steps.version.outputs.version }}'
        ./scripts/subst-configs.sh ${{ inputs.modpack }}/config

    - name: Install nix
      uses: cachix/install-nix-action@v22

    - name: Build Modrinth Modpack
      if: inputs.build-modrinth == 'true'
      run: |
        nix develop --command packwiz modrinth export
        echo "::notice ::⚙ Modpack ${{ inputs.modpack }} has been exported as .mrpack"
      shell: bash
      working-directory: ${{ inputs.modpack }}

    - name: Build CurseForge Modpack
      if: inputs.build-curse == 'true'
      run: |
        nix develop --command packwiz curseforge export
        echo "::notice ::⚙ Modpack ${{ inputs.modpack }} has been exported as .zip"
      shell: bash
      working-directory: ${{ inputs.modpack }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        if-no-files-found: error
        path: |
          ${{ inputs.modpack }}/*.mrpack
          ${{ inputs.modpack }}/*.zip
